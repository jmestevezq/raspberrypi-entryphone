//TODO: create packages
//TODO: create tests
var fs = require('fs');
var path = require('path');
var EventEmitter = require('events').EventEmitter;
var exists = fs.exists || path.exists;

var gpiopath = '/sys/class/gpio/';

var logError = function(e) { if(e) console.log(e.code, e.action, e.path); };
var logMessage = function() { if (exports.logging) console.log.apply(console, arguments); };

var _write = function(str, file, fn, override) {
    if(typeof fn !== "function") fn = logError;
    fs.writeFile(file, str, function(err) {
	if(err && !override) {
	    err.path = file;
	    err.action = 'write';
	    logError(err);
	} else {
	    if(typeof fn === "function") fn();
	}
    });
};
var _read = function(file, fn) {
    fs.readFile(file, "utf-8", function(err, data) {
	if(err) {
	    err.path = file;
	    err.action = 'read';
	    logError(err);
	} else {
	    if(typeof fn === "function") fn(data);
	    else logMessage("value: ", data);
	}
    });
};

var _unexport = function(number, fn) {
    _write(number, gpiopath + 'unexport', function(err) {
	if(err) return logError(err);
	if(typeof fn === 'function') fn();
    }, 1);
};
var _export = function(n, fn) {
    if(exists(gpiopath + 'gpio'+n)) {
// already exported, unexport and export again
	logMessage('Header already exported');
	_unexport(n, function() { _export(n, fn); });
    } else {
	logMessage('Exporting gpio' + n);
	_write(n, gpiopath + 'export', function(err) {
// if there's an error when exporting, unexport and repeat
	    if(err) _unexport(n, function() { _export(n, fn); });
	    else if(typeof fn === 'function') fn();
	}, 1);
    }
};

//TODO: Add error handling
//TODO: Check for valid parameters (numbers, in/out, 0/1)
var configure = function (port, direction, fn) {
    _export(15);
    path = gpiopath + 'gpio' + port + '/direction';
    _write(direction, path);
}

var set = function (port, value, fn) {
    path = gpiopath + 'gpio' + port + '/value';
    _write(value, path);
}

var bounce = function (port,  secons, fn) {
    set (port, '0');
    setTimeout (function () { set(port,'1')}, 1 );
}

exports.configure = configure;
exports.set = set;
exports.bounce = bounce;